version: '3.8'

services:
  # PostgreSQL - 관계형 데이터베이스 (사용자, 세션 데이터 등)
  postgres:
    image: postgres:14-alpine
    container_name: haptitalk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${POSTGRES_VOLUME_NAME}:/var/lib/postgresql/data
      - ./infrastructure/database/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - 비정형 데이터베이스 (분석 결과, 대화 데이터 등)
  mongodb:
    image: mongo:5
    container_name: haptitalk-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - ${MONGODB_VOLUME_NAME}:/data/db
      - ./infrastructure/database/mongodb/init:/docker-entrypoint-initdb.d
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - haptitalk_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 캐싱 및 메시지 브로커
  redis:
    image: redis:7-alpine
    container_name: haptitalk-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c '
      redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes &
      sleep 5 &&
      /init/redis-init.sh &&
      wait
      '
    volumes:
      - ${REDIS_VOLUME_NAME}:/data
      - ./infrastructure/database/redis/init:/init
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong API 게이트웨이 (DB-less 모드)
  kong:
    image: kong:3.0
    container_name: haptitalk-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    volumes:
      - ./infrastructure/api-gateway/kong.yml:/etc/kong/kong.yml
    ports:
      - "${KONG_PROXY_PORT}:8000"
      - "${KONG_HTTPS_PORT}:8443"
      - "${KONG_ADMIN_PORT}:8001"
      - "8444:8444"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NGINX 리버스 프록시
  nginx:
    image: nginx:1.23-alpine
    container_name: haptitalk-nginx
    restart: unless-stopped
    volumes:
      - ./infrastructure/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/reverse-proxy/html:/usr/share/nginx/html:ro
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    networks:
      - haptitalk_network
    depends_on:
      - kong
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 정적 웹 서버 (관리자 페이지)
  static-web:
    image: nginx:1.23-alpine
    container_name: haptitalk-static-web
    restart: unless-stopped
    volumes:
      - ./infrastructure/reverse-proxy/html:/usr/share/nginx/html:ro
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 인증 서비스
  auth-service:
    build:
      context: ./api/auth-service
      dockerfile: Dockerfile
    container_name: haptitalk-auth-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${AUTH_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      - JWT_SESSION_EXPIRES_IN=${JWT_SESSION_EXPIRES_IN}
      - EMAIL_FROM=${EMAIL_FROM}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./api/auth-service:/app
      - /app/node_modules
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${AUTH_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 실시간 서비스
  realtime-service:
    build:
      context: ./api/realtime-service
      dockerfile: Dockerfile
    container_name: haptitalk-realtime-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${REALTIME_SERVICE_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./api/realtime-service:/app
      - /app/node_modules
    ports:
      - "${REALTIME_SERVICE_PORT}:${REALTIME_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${REALTIME_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 세션 서비스
  session-service:
    build:
      context: ./api/session-service
      dockerfile: Dockerfile
    container_name: haptitalk-session-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${SESSION_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./api/session-service:/app
      - /app/node_modules
    ports:
      - "${SESSION_SERVICE_PORT}:${SESSION_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${SESSION_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 피드백 서비스
  feedback-service:
    build:
      context: ./api/feedback-service
      dockerfile: Dockerfile
    container_name: haptitalk-feedback-service
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=${FEEDBACK_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./api/feedback-service:/app
      - /app/node_modules
    ports:
      - "${FEEDBACK_SERVICE_PORT}:${FEEDBACK_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - mongodb
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${FEEDBACK_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  haptitalk_network:
    driver: bridge

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME}
  mongodb_data:
    name: ${MONGODB_VOLUME_NAME}
  redis_data:
    name: ${REDIS_VOLUME_NAME}
  kong_data:
    name: ${KONG_VOLUME_NAME}