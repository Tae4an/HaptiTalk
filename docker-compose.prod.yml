services:
  # PostgreSQL - 관계형 데이터베이스 (사용자, 세션 데이터 등)
  postgres:
    image: postgres:14-alpine
    container_name: haptitalk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${POSTGRES_VOLUME_NAME}:/var/lib/postgresql/data
      - ./infrastructure/database/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - 비정형 데이터베이스 (분석 결과, 대화 데이터 등)
  mongodb:
    image: mongo:5
    container_name: haptitalk-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - ${MONGODB_VOLUME_NAME}:/data/db
      - ./infrastructure/database/mongodb/init:/docker-entrypoint-initdb.d
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - haptitalk_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 캐싱 및 메시지 브로커
  redis:
    image: redis:7-alpine
    container_name: haptitalk-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c '
      redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes &
      sleep 5 &&
      /init/redis-init.sh &&
      wait
      '
    volumes:
      - ${REDIS_VOLUME_NAME}:/data
      - ./infrastructure/database/redis/init:/init
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper - Kafka 클러스터 관리
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: haptitalk-zookeeper
    restart: unless-stopped
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  # Kafka - 메시징 시스템
  kafka:
    image: bitnami/kafka:3.4
    container_name: haptitalk-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_HEAP_OPTS=-Xmx512m -Xms256m
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_data:/bitnami/kafka

  # Kafka UI - Kafka 관리 웹 인터페이스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: haptitalk-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: haptitalk
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - haptitalk_network

  # Kafka 초기화 서비스
  kafka-init:
    image: bitnami/kafka:3.4
    container_name: haptitalk-kafka-init
    depends_on:
      - kafka
    volumes:
      - ./infrastructure/messaging/kafka/init:/scripts
    environment:
      KAFKA_TOPIC_SESSION_EVENTS: ${KAFKA_TOPIC_SESSION_EVENTS}
      KAFKA_TOPIC_ANALYSIS_RESULTS: ${KAFKA_TOPIC_ANALYSIS_RESULTS}
      KAFKA_TOPIC_FEEDBACK_COMMANDS: ${KAFKA_TOPIC_FEEDBACK_COMMANDS}
      KAFKA_TOPIC_USER_ACTIVITY: ${KAFKA_TOPIC_USER_ACTIVITY}
    command: ["bash", "-c", "chmod +x /scripts/kafka-init.sh && /scripts/kafka-init.sh"]
    networks:
      - haptitalk_network
    restart: on-failure

  # Kong API 게이트웨이 (DB-less 모드)
  kong:
    image: kong:3.0
    container_name: haptitalk-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /tmp/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      # API 문서 접근 인증 설정
      API_DOCS_USERNAME: ${API_DOCS_USERNAME:-apidocs}
      API_DOCS_PASSWORD: ${API_DOCS_PASSWORD:-haptitalk-docs}
      # JWT 서비스 키 설정
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_APP_KEY_ID: ${JWT_APP_KEY_ID:-haptitalk-app-key}
      JWT_ADMIN_KEY_ID: ${JWT_ADMIN_KEY_ID:-haptitalk-admin-key}
    volumes:
      # 템플릿 파일을 컨테이너의 /tmp 디렉토리에 마운트
      - ./infrastructure/api-gateway/kong.yml.template:/tmp/kong.yml.template
      - ./infrastructure/api-gateway/entrypoint.sh:/usr/local/bin/custom-entrypoint.sh
    command: ["/usr/local/bin/custom-entrypoint.sh"]
    ports:
      - "${KONG_PROXY_PORT}:8000"
      - "${KONG_HTTPS_PORT}:8443"
      - "${KONG_ADMIN_PORT}:8001"
      - "8444:8444"
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 정적 웹 서버 (관리자 페이지)
  static-web:
    image: nginx:1.23-alpine
    container_name: haptitalk-static-web
    restart: unless-stopped
    volumes:
      - ./infrastructure/static-web/html:/usr/share/nginx/html:ro
    networks:
      - haptitalk_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 인증 서비스 (GitHub Container Registry 이미지 사용)
  auth-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/haptitalk-auth-service:${IMAGE_TAG:-latest}
    container_name: haptitalk-auth-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${AUTH_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      - JWT_SESSION_EXPIRES_IN=${JWT_SESSION_EXPIRES_IN}
      - EMAIL_FROM=${EMAIL_FROM}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_USER_ACTIVITY=${KAFKA_TOPIC_USER_ACTIVITY}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=auth-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${AUTH_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 실시간 서비스 (GitHub Container Registry 이미지 사용)
  realtime-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/haptitalk-realtime-service:${IMAGE_TAG:-latest}
    container_name: haptitalk-realtime-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${REALTIME_SERVICE_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - SESSION_SERVICE_URL=http://session-service:${SESSION_SERVICE_PORT}
      - FEEDBACK_SERVICE_URL=http://feedback-service:${FEEDBACK_SERVICE_PORT}
      - INTER_SERVICE_TOKEN=${JWT_SERVICE_SECRET:-service-token-for-inter-service-communication}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_SESSION_EVENTS=${KAFKA_TOPIC_SESSION_EVENTS}
      - KAFKA_TOPIC_ANALYSIS_RESULTS=${KAFKA_TOPIC_ANALYSIS_RESULTS}
      - KAFKA_TOPIC_FEEDBACK_COMMANDS=${KAFKA_TOPIC_FEEDBACK_COMMANDS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=realtime-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${REALTIME_SERVICE_PORT}:${REALTIME_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${REALTIME_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 세션 서비스 (GitHub Container Registry 이미지 사용)
  session-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/haptitalk-session-service:${IMAGE_TAG:-latest}
    container_name: haptitalk-session-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${SESSION_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_SESSION_EVENTS=${KAFKA_TOPIC_SESSION_EVENTS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=session-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${SESSION_SERVICE_PORT}:${SESSION_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${SESSION_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 피드백 서비스 (GitHub Container Registry 이미지 사용)
  feedback-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/haptitalk-feedback-service:${IMAGE_TAG:-latest}
    container_name: haptitalk-feedback-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${FEEDBACK_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_FEEDBACK_COMMANDS=${KAFKA_TOPIC_FEEDBACK_COMMANDS}
      - KAFKA_TOPIC_ANALYSIS_RESULTS=${KAFKA_TOPIC_ANALYSIS_RESULTS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=feedback-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${FEEDBACK_SERVICE_PORT}:${FEEDBACK_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - mongodb
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${FEEDBACK_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 사용자 서비스 (GitHub Container Registry 이미지 사용)
  user-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/haptitalk-user-service:${IMAGE_TAG:-latest}
    container_name: haptitalk-user-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${USER_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_USER_ACTIVITY=${KAFKA_TOPIC_USER_ACTIVITY}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=user-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:${USER_SERVICE_PORT}/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # 리포트 서비스 (GitHub Container Registry 이미지 사용)
  report-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/haptitalk-report-service:${IMAGE_TAG:-latest}
    container_name: haptitalk-report-service
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=${REPORT_SERVICE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
      # Kafka 설정
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC_SESSION_EVENTS=${KAFKA_TOPIC_SESSION_EVENTS}
      - KAFKA_TOPIC_ANALYSIS_RESULTS=${KAFKA_TOPIC_ANALYSIS_RESULTS}
      # OpenTelemetry 트레이싱 설정
      - SERVICE_NAME=report-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://haptitalk-otel-collector:${OTEL_COLLECTOR_PORT:-4318}/v1/traces
    ports:
      - "${REPORT_SERVICE_PORT}:${REPORT_SERVICE_PORT}"
    networks:
      - haptitalk_network
    depends_on:
      - postgres
      - redis
      - mongodb
      - kafka
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${REPORT_SERVICE_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  haptitalk_network:
    driver: bridge
    name: haptitalk_network

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME}
  mongodb_data:
    name: ${MONGODB_VOLUME_NAME}
  redis_data:
    name: ${REDIS_VOLUME_NAME}
  kong_data:
    name: ${KONG_VOLUME_NAME}
  zookeeper_data:
    name: ${ZOOKEEPER_VOLUME_NAME:-zookeeper_data}
  zookeeper_log:
    name: ${ZOOKEEPER_LOG_VOLUME_NAME:-zookeeper_log}
  kafka_data:
    name: ${KAFKA_VOLUME_NAME:-kafka_data}
    