input {
  tcp {
    port => 5000
    codec => json_lines
  }
  beats {
    port => 5044
    add_field => { "[@metadata][target_index]" => "logs-%{+YYYY.MM.dd}" }
  }
}

filter {
  if [message] =~ /^{.*}$/ {
    json {
      source => "message"
      skip_on_invalid_json => true
      target => "parsed_json"
    }
    
    if "_jsonparsefailure" not in [tags] and [parsed_json] {
      ruby {
        code => "
          parsed = event.get('parsed_json')
          if parsed.is_a?(Hash)
            parsed.each { |k, v| event.set(k, v) }
          end
          event.remove('parsed_json')
        "
      }
    }
  }
  
  if ![timestamp] and [time] {
    mutate {
      rename => { "time" => "timestamp" }
    }
  }
  
  if ![timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "timestamp"
    }
  }

  if ![service] {
    mutate {
      add_field => { "service" => "unknown" }
    }
  }
  
  if ![level] {
    mutate {
      add_field => { "level" => "info" }
    }
  }
  
  # Docker 로그 처리
  if [container] {
    mutate {
      add_field => { "service" => "%{[container][name]}" }
    }
    
    # Docker 컨테이너 이름에서 서비스 이름 추출
    if [service] and [service] =~ /haptitalk-(.+)/ {
      mutate {
        gsub => ["service", "haptitalk-", ""]
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTIC_USERNAME:elastic}"
    password => "${ELASTIC_PASSWORD:changeme}"
    index => "logs"
    ilm_enabled => true
    ilm_rollover_alias => "logs"
    ilm_pattern => "{now/d}-000001"
    ilm_policy => "logs-policy"
    ecs_compatibility => disabled
    action => "index"
  }
  
  # 디버깅을 위해 표준 출력
  stdout {
    codec => rubydebug
  }
} 