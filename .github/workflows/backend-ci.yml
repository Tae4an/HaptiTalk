name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    name: Test Backend Services
    runs-on: ubuntu-latest
    services:
      # 테스트용 PostgreSQL 서비스
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: haptitalk_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # 테스트용 MongoDB 서비스  
      mongodb:
        image: mongo:5
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
          MONGO_INITDB_DATABASE: haptitalk_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ping: 1})' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # 테스트용 Redis 서비스
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        service: [auth-service, realtime-service, session-service, feedback-service, user-service, report-service]
      fail-fast: false  # 한 서비스 실패해도 다른 서비스 계속 테스트
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd api/${{ matrix.service }}
          npm ci
      
      - name: Run linting
        run: |
          cd api/${{ matrix.service }}
          npm run lint || echo "Linting not configured, skipping"
      
      - name: Run tests
        run: |
          cd api/${{ matrix.service }}
          npm test -- --passWithNoTests
        env:
          NODE_ENV: test
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET || 'test-jwt-secret' }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET || 'test-refresh-secret' }}
          JWT_SESSION_SECRET: ${{ secrets.JWT_SESSION_SECRET || 'test-session-secret' }}
          # 데이터베이스 연결 정보
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: haptitalk_test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          MONGO_USER: test
          MONGO_PASSWORD: test
          MONGO_DB: haptitalk_test
          MONGO_HOST: localhost
          MONGO_PORT: 27017
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
        continue-on-error: true

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [auth-service, realtime-service, session-service, feedback-service, user-service, report-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      - name: Generate image tags
        id: meta
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/haptitalk-${{ matrix.service }}
          TAGS="${DOCKER_IMAGE}:${{ env.BRANCH_NAME }}"
          
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            TAGS="${TAGS},${DOCKER_IMAGE}:latest"
          fi
          
          VERSION=$(date +'%Y%m%d%H%M%S')
          TAGS="${TAGS},${DOCKER_IMAGE}:${VERSION}"
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
