name: Service Monitoring

on:
  schedule:
    - cron: '*/30 * * * *'  # 30분마다 실행
  workflow_dispatch:  # 수동 실행 가능

jobs:
  health_check:
    name: Service Health Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, production]
        include:
          - environment: development
            base_url: http://localhost:3000
          - environment: production
            base_url: http://localhost:8000
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set API URLs from secrets (if available)
        run: |
          if [[ -n "$DEV_API_URL" ]]; then
            echo "DEV_BASE_URL=$DEV_API_URL" >> $GITHUB_ENV
          else
            echo "DEV_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          fi
          
          if [[ -n "$PROD_API_URL" ]]; then
            echo "PROD_BASE_URL=$PROD_API_URL" >> $GITHUB_ENV
          else
            echo "PROD_BASE_URL=http://localhost:8000" >> $GITHUB_ENV
          fi
      
      - name: Set current base URL
        run: |
          if [[ "${{ matrix.environment }}" == "development" ]]; then
            echo "CURRENT_BASE_URL=$DEV_BASE_URL" >> $GITHUB_ENV
          else
            echo "CURRENT_BASE_URL=$PROD_BASE_URL" >> $GITHUB_ENV
          fi

      - name: Check Auth Service
        id: auth_health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ env.CURRENT_BASE_URL }}/api/health/auth
          max-attempts: 3
          retry-delay: 5s
          retry-all: true
        continue-on-error: true
      
      - name: Check Realtime Service
        id: realtime_health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ env.CURRENT_BASE_URL }}/api/health/realtime
          max-attempts: 3
          retry-delay: 5s
          retry-all: true
        continue-on-error: true
      
      - name: Check Session Service
        id: session_health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ env.CURRENT_BASE_URL }}/api/health/sessions
          max-attempts: 3
          retry-delay: 5s
          retry-all: true
        continue-on-error: true
      
      - name: Check Feedback Service
        id: feedback_health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ env.CURRENT_BASE_URL }}/api/health/feedback
          max-attempts: 3
          retry-delay: 5s
          retry-all: true
        continue-on-error: true
      
      - name: Check User Service
        id: user_health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ env.CURRENT_BASE_URL }}/api/health/users
          max-attempts: 3
          retry-delay: 5s
          retry-all: true
        continue-on-error: true
      
      - name: Check Report Service
        id: report_health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ env.CURRENT_BASE_URL }}/api/health/reports
          max-attempts: 3
          retry-delay: 5s
          retry-all: true
        continue-on-error: true
      
      - name: Determine overall status
        id: overall_status
        run: |
          AUTH_STATUS="${{ steps.auth_health.outcome }}"
          REALTIME_STATUS="${{ steps.realtime_health.outcome }}"
          SESSION_STATUS="${{ steps.session_health.outcome }}"
          FEEDBACK_STATUS="${{ steps.feedback_health.outcome }}"
          USER_STATUS="${{ steps.user_health.outcome }}"
          REPORT_STATUS="${{ steps.report_health.outcome }}"
          
          if [[ "$AUTH_STATUS" == "success" && "$REALTIME_STATUS" == "success" && "$SESSION_STATUS" == "success" && "$FEEDBACK_STATUS" == "success" && "$USER_STATUS" == "success" && "$REPORT_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All services are up and running" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some services are down" >> $GITHUB_OUTPUT
          fi
      
      - name: Set slack channel
        id: set_slack_channel
        run: |
          if [[ -n "$SLACK_CHANNEL" ]]; then
            echo "channel=$SLACK_CHANNEL" >> $GITHUB_OUTPUT
          else
            echo "channel=monitoring" >> $GITHUB_OUTPUT
          fi

      - name: Set slack color
        id: set_slack_color
        run: |
          if [[ "${{ steps.overall_status.outputs.status }}" == "success" ]]; then
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Format service status
        id: format_status
        run: |
          # 각 서비스 상태를 이모지로 변환
          AUTH_EMOJI="❌"
          if [[ "${{ steps.auth_health.outcome }}" == "success" ]]; then
            AUTH_EMOJI="✅"
          fi

          REALTIME_EMOJI="❌"
          if [[ "${{ steps.realtime_health.outcome }}" == "success" ]]; then
            REALTIME_EMOJI="✅"
          fi

          SESSION_EMOJI="❌"
          if [[ "${{ steps.session_health.outcome }}" == "success" ]]; then
            SESSION_EMOJI="✅"
          fi

          FEEDBACK_EMOJI="❌"
          if [[ "${{ steps.feedback_health.outcome }}" == "success" ]]; then
            FEEDBACK_EMOJI="✅"
          fi

          USER_EMOJI="❌"
          if [[ "${{ steps.user_health.outcome }}" == "success" ]]; then
            USER_EMOJI="✅"
          fi

          REPORT_EMOJI="❌"
          if [[ "${{ steps.report_health.outcome }}" == "success" ]]; then
            REPORT_EMOJI="✅"
          fi

          MESSAGE="*${{ steps.overall_status.outputs.message }} in ${{ matrix.environment }} environment*"
          MESSAGE="${MESSAGE}"$'\n'$'\n'"Auth Service: ${AUTH_EMOJI}"
          MESSAGE="${MESSAGE}"$'\n'"Realtime Service: ${REALTIME_EMOJI}"
          MESSAGE="${MESSAGE}"$'\n'"Session Service: ${SESSION_EMOJI}"
          MESSAGE="${MESSAGE}"$'\n'"Feedback Service: ${FEEDBACK_EMOJI}"
          MESSAGE="${MESSAGE}"$'\n'"User Service: ${USER_EMOJI}"
          MESSAGE="${MESSAGE}"$'\n'"Report Service: ${REPORT_EMOJI}"
          
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Set webhook URL
        id: set_webhook
        run: |
          if [[ -n "$SLACK_WEBHOOK" ]]; then
            echo "webhook=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT
          else
            echo "webhook=https://hooks.slack.com/services/dummy/dummy/dummy" >> $GITHUB_OUTPUT
          fi
      
      - name: Send status to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ steps.set_webhook.outputs.webhook }}
          SLACK_CHANNEL: ${{ steps.set_slack_channel.outputs.channel }}
          SLACK_COLOR: ${{ steps.set_slack_color.outputs.color }}
          SLACK_TITLE: Service Health Check - ${{ matrix.environment }}
          SLACK_MESSAGE: ${{ steps.format_status.outputs.message }}
          SLACK_FOOTER: 'Haptitalk Service Monitoring'
