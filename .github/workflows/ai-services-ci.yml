name: AI Services CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ai/**'
      - '.github/workflows/ai-services-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ai/**'
      - '.github/workflows/ai-services-ci.yml'

jobs:
  test:
    name: Test AI Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [emotion-analysis-service, speaker-diarization-service, stt-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Check if requirements.txt exists
        id: check_requirements
        run: |
          if [ -f "ai/${{ matrix.service }}/requirements.txt" ]; then
            echo "requirements_exist=true" >> $GITHUB_OUTPUT
          else
            echo "requirements_exist=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install dependencies
        if: steps.check_requirements.outputs.requirements_exist == 'true'
        run: |
          cd ai/${{ matrix.service }}
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
      
      - name: Run tests
        if: steps.check_requirements.outputs.requirements_exist == 'true'
        run: |
          cd ai/${{ matrix.service }}
          python -m pytest || echo "No tests configured yet"
  
  build_docker:
    name: Build AI Service Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [emotion-analysis-service, speaker-diarization-service, stt-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "ai/${{ matrix.service }}/Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Docker Buildx
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract branch name
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      - name: Generate image tags
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        id: meta
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/haptitalk-${{ matrix.service }}
          TAGS="${DOCKER_IMAGE}:${{ env.BRANCH_NAME }}"
          
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            TAGS="${TAGS},${DOCKER_IMAGE}:latest"
          fi
          
          VERSION=$(date +'%Y%m%d%H%M%S')
          TAGS="${TAGS},${DOCKER_IMAGE}:${VERSION}"
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./ai/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
